# -*- encoding: utf-8 -*-
# Copyright (C) 2015 Akretion France (www.akretion.com)
# @author: Alexis de Lattre <alexis.delattre@akretion.com>
# The licence is in the file __openerp__.py

-
  Create French VAT 20% tax
-
  !record {model: account.tax, id: fr_vat_purchase_20}:
    name: French VAT purchase 20.0%
    description: FR-VAT-buy-20.0
    amount: 0.2
    type: percent
    account_collected_id: account.a_expense
    account_paid_id: account.a_expense
    base_sign: -1
    tax_sign: -1
    type_tax_use: purchase
-
  Set this tax on Internet access product
-
  !python {model: product.product, id: account_invoice_import.internet_access}: |
    self.supplier_taxes_id = [(6, 0, [ref('fr_vat_purchase_20')])]
-
  Import PDF
-
  !python {model: account.invoice.import}: |
    import base64
    from openerp.tools import file_open
    f = file_open('account_invoice_import/test/pdf/invoice_free_fiber_201507.pdf', 'rb')
    pdf_file = f.read()
    wiz_id = self.create(cr, uid, {
        'invoice_file': base64.b64encode(pdf_file),
        'invoice_filename': 'invoice_free_fiber_201507.pdf',
        }, context=context),
    f.close()
    self.import_invoice(cr, uid, wiz_id, context=context)
-
  Check result of invoice creation
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    inv_ids = self.search(cr, uid, [
        ('state', '=', 'draft'),
        ('type', '=', 'in_invoice'),
        ('supplier_invoice_number', '=', '562044387')
        ], context=context)
    assert len(inv_ids) == 1, 'Supplier draft invoice has not been created'
    inv = self.browse(cr, uid, inv_ids[0], context=context)
    assert inv.type == 'in_invoice', 'Wrong invoice type'
    assert inv.date_invoice == '2015-07-02', 'Wrong invoice date'
    assert inv.partner_id.id == ref('free'), 'Wrong supplier on invoice'
    assert inv.journal_id.type == 'purchase', 'Wrong journal'
    assert float_compare(inv.check_total, 29.99, precision_digits=2) == 0, 'Wrong check_total'
    assert float_compare(inv.amount_total, 29.99, precision_digits=2) == 0, 'Wrong total amount'
    assert float_compare(inv.amount_untaxed, 24.99, precision_digits=2) == 0, 'Wrong untaxed amount'
    assert len(inv.invoice_line) == 1, 'Should have 1 invoice line'
    iline = inv.invoice_line[0]
    assert iline.name == 'Fiber optic access at the main office', 'Wrong label on invoice line'
    assert iline.product_id.id == ref('internet_access'), 'Wrong product on invoice line'
    assert float_compare(iline.quantity, 1.0, precision_digits=0) == 0, 'Wrong qty on invoice line'
    assert float_compare(iline.price_unit, 24.99, precision_digits=2) == 0, 'Wrong price unit on invoice line'
-
  Prepare data for next test i.e. invoice update (we re-use the invoice created by the first import !)
-
  !python {model: account.invoice}: |
    inv_ids = self.search(cr, uid, [
        ('state', '=', 'draft'),
        ('type', '=', 'in_invoice'),
        ('supplier_invoice_number', '=', '562044387')
        ], context=context)
    assert len(inv_ids) == 1, 'Supplier draft invoice has not been created'
    inv = self.write(cr, uid, inv_ids[0], {
        'date_invoice': False,
        'supplier_invoice_number': False,
        'check_total': False}, context=context)
-
  New import with update of an existing draft invoice
-
  !python {model: account.invoice.import}: |
    import base64
    from openerp.tools import file_open
    f = file_open('account_invoice_import/test/pdf/invoice_free_fiber_201507.pdf', 'rb')
    pdf_file = f.read()
    wiz_id = self.create(cr, uid, {
        'invoice_file': base64.b64encode(pdf_file),
        'invoice_filename': 'invoice_free_fiber_201507.pdf',
        }, context=context),
    f.close()
    action = self.import_invoice(cr, uid, wiz_id, context=context)
    # Choose to update the existing invoice
    self.update_invoice(cr, uid, wiz_id, context=action['context'])
-
  Check result of invoice update
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    inv_ids = self.search(cr, uid, [
        ('state', '=', 'draft'),
        ('type', '=', 'in_invoice'),
        ('supplier_invoice_number', '=', '562044387')
        ], context=context)
    assert len(inv_ids) == 1, 'Supplier draft invoice has not been updated'
    inv = self.browse(cr, uid, inv_ids[0], context=context)
    assert inv.date_invoice == '2015-07-02', 'Update: Wrong invoice date'
    assert float_compare(inv.check_total, 29.99, precision_digits=2) == 0, 'Update: Wrong check_total'
 
