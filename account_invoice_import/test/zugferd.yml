# -*- encoding: utf-8 -*-
# Copyright (C) 2015 Akretion France (www.akretion.com)
# @author: Alexis de Lattre <alexis.delattre@akretion.com>
# The licence is in the file __openerp__.py

-
  Create German VAT 19% tax
-
  !record {model: account.tax, id: de_vat_purchase_19}:
    name: German VAT purchase 19.0%
    description: DE-VAT-buy-20.0
    amount: 0.19
    type: percent
    account_collected_id: account.a_expense
    account_paid_id: account.a_expense
    base_sign: -1
    tax_sign: -1
    type_tax_use: purchase
-
  Set this tax on lieferant_import_config
-
  !python {model: account.invoice.import.config, id: lieferant_import_config}: |
    self.tax_ids = [(6, 0, [ref('de_vat_purchase_19')])]
-
  Import PDF
-
  !python {model: account.invoice.import}: |
    import base64
    from openerp.tools import file_open
    f = file_open('account_invoice_import/test/invoices/ZUGFeRD_1p0_BASIC_Einfach.pdf', 'rb')
    pdf_file = f.read()
    wiz_id = self.create(cr, uid, {
        'invoice_file': base64.b64encode(pdf_file),
        'invoice_filename': 'ZUGFeRD_1p0_BASIC_Einfach.pdf',
        }, context=context)
    f.close()
    self.import_invoice(cr, uid, wiz_id, context=context)
-
  Check result of invoice creation
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    inv_ids = self.search(cr, uid, [
        ('state', '=', 'draft'),
        ('type', '=', 'in_invoice'),
        ('supplier_invoice_number', '=', '471102')
        ], context=context)
    assert len(inv_ids) == 1, 'Supplier draft invoice has not been created'
    inv = self.browse(cr, uid, inv_ids[0], context=context)
    assert inv.type == 'in_invoice', 'Wrong invoice type'
    assert inv.date_invoice == '2013-03-05', 'Wrong invoice date'
    assert inv.partner_id.id == ref('lieferant'), 'Wrong supplier on invoice'
    assert inv.journal_id.type == 'purchase', 'Wrong journal'
    assert float_compare(inv.check_total, 235.62, precision_digits=2) == 0, 'Wrong check_total'
    assert float_compare(inv.amount_untaxed, 198.00, precision_digits=2) == 0, 'Wrong untaxed amount'
    # Delete invoice because all Zugferd tests use the same inv number
    self.unlink(cr, uid, inv_ids, context=context)
-
  Now try to import XML file directly
-
  !python {model: account.invoice.import}: |
    import base64
    from openerp.tools import file_open
    f = file_open('account_invoice_import/test/invoices/ZUGFeRD_1p0_COMFORT_Einfach.pdf-ZUGFeRD-invoice.xml', 'rb')
    xml_file = f.read()
    wiz_id = self.create(cr, uid, {
        'invoice_file': base64.b64encode(xml_file),
        'invoice_filename': 'ZUGFeRD_1p0_COMFORT_Einfach.pdf-ZUGFeRD-invoice.xml',
        }, context=context)
    f.close()
    self.import_invoice(cr, uid, wiz_id, context=context)
-
  Check result of invoice creation from XML file
-
  !python {model: account.invoice}: |
    from openerp.tools import float_compare
    inv_ids = self.search(cr, uid, [
        ('state', '=', 'draft'),
        ('type', '=', 'in_invoice'),
        ('supplier_invoice_number', '=', '471102')
        ], context=context)
    assert len(inv_ids) == 1, 'Supplier draft invoice has not been created'
    inv = self.browse(cr, uid, inv_ids[0], context=context)
    assert inv.type == 'in_invoice', 'Wrong invoice type'
    assert inv.date_invoice == '2013-03-05', 'Wrong invoice date'
    assert inv.partner_id.id == ref('lieferant'), 'Wrong supplier on invoice'
    assert inv.journal_id.type == 'purchase', 'Wrong journal'
    assert float_compare(inv.check_total, 529.87, precision_digits=2) == 0, 'Wrong check_total'
    assert float_compare(inv.amount_untaxed, 473.00, precision_digits=2) == 0, 'Wrong untaxed amount'
    self.unlink(cr, uid, inv_ids, context=context)
