-
  I create a Tax Codes
-
  !record {model: account.tax.code, id: tax_case}:
    name: Tax_case
    company_id: base.main_company
    sign: 1
-
  I create a Tax
-
  !record {model: account.tax, id: tax10}:
    name: Tax 10.0
    amount: 10.0
    type: fixed
    sequence: 1
    company_id: base.main_company
    type_tax_use: all
    tax_code_id: tax_case
-
  I create a Tax Code for 8%
-
  !record {model: account.tax.code, id: tax_case_8}:
    name: Tax_case_8
    company_id: base.main_company
    sign: 1
-
  I create a Tax for 8% included in price
-
  !record {model: account.tax, id: tax8i}:
    name: Tax 8% included
    amount: 0.08
    type: percent
    sequence: 1
    company_id: base.main_company
    type_tax_use: all
    tax_code_id: tax_case_8
    price_include: True
-
  I create a Tax for 8%
-
  !record {model: account.tax, id: tax8}:
    name: Tax 8%
    amount: 0.08
    type: percent
    sequence: 1
    company_id: base.main_company
    type_tax_use: all
    tax_code_id: tax_case_8
    price_include: False
-
  In order to test invoice rounding, I configure rounding method to swedish round globally
- !python {model: res.company, id: base.main_company}: |
     self.tax_calculation_rounding = 0.05
     self.tax_calculation_rounding_method = 'swedish_round_globally'
-
  In order to test that an invoice is correctly rounded down, I configure an invoice.
-
  !record {model: account.invoice, id: invoice_round_down}:
    account_id: account.a_recv
    company_id: base.main_company
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 100.02
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
        invoice_line_tax_id:
          - tax10
    journal_id: account.bank_journal
    partner_id: base.res_partner_12
    reference_type: none
-
  I check that Initially customer invoice state is "Draft"
-
  !assert {model: account.invoice, id: invoice_round_down}:
    - state == 'draft'
-
  I call the workflow "invoice_open"
-
  !workflow {model: account.invoice, action: invoice_open, ref: invoice_round_down}
-
  I check that the invoice state is "open" and the total amount is 110.00
-
  !assert {model: account.invoice, id: invoice_round_down, string: Invoce is in open state}:
    - state == 'open'
    - amount_total == 110.00
-
  In order to test that an invoice is correctly rounded up, I configure 
  an invoice.
-
  !record {model: account.invoice, id: invoice_round_up}:
    account_id: account.a_recv
    company_id: base.main_company
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 100.04
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
        invoice_line_tax_id:
          - tax10
    journal_id: account.bank_journal
    partner_id: base.res_partner_12
    reference_type: none
-
  I check that Initially customer invoice state is "Draft"
-
  !assert {model: account.invoice, id: invoice_round_up}:
    - state == 'draft'
-
  !workflow {model: account.invoice, action: invoice_open, ref: invoice_round_up}
-
  I check that the invoice state is "open" and the total amount is 110.05
-
  !assert {model: account.invoice, id: invoice_round_up, string: Invoce is in open state}:
    - state == 'open'
    - amount_total == 110.05
-
  I create an invoice with 8% included and excluded in price
-
  !record {model: account.invoice, id: invoice_8_8i}:
    account_id: account.a_recv
    company_id: base.main_company
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 141
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
        invoice_line_tax_id:
          - tax8
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 348.1
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
        invoice_line_tax_id:
          - tax8i
    journal_id: account.bank_journal
    partner_id: base.res_partner_12
    reference_type: none
-
  I check that Initially customer invoice state is "Draft"
-
  !assert {model: account.invoice, id: invoice_8_8i}:
    - state == 'draft'
-
  !workflow {model: account.invoice, action: invoice_open, ref: invoice_8_8i}
-
  I check that the invoice state and amount
-
  !assert {model: account.invoice, id: invoice_8_8i, string: Invoce is in open state}:
    - state == 'open'
    - amount_total == 500.40
-
  I create an invoice with 8% included and discount
-
  !record {model: account.invoice, id: invoice_8i_discount}:
    account_id: account.a_recv
    company_id: base.main_company
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 1727.65
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
        discount: 3
        invoice_line_tax_id:
          - tax8i
    journal_id: account.bank_journal
    partner_id: base.res_partner_12
    reference_type: none
-
  I check that Initially customer invoice state is "Draft"
-
  !assert {model: account.invoice, id: invoice_8i_discount}:
    - state == 'draft'
-
  !workflow {model: account.invoice, action: invoice_open, ref: invoice_8i_discount}
-
  I check that the invoice state and amount
-
  !assert {model: account.invoice, id: invoice_8i_discount, string: Invoce is in open state}:
    - state == 'open'
    - amount_total == 1675.80
-
  I create an invoice with 8% included and discount + another line with 8%
-
  !record {model: account.invoice, id: invoice_8i_discount_8}:
    account_id: account.a_recv
    company_id: base.main_company
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 141
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
        invoice_line_tax_id:
          - tax8
      - account_id: account.a_sale
        name: '[PCSC234] PC Assemble SC234'
        price_unit: 348.1
        quantity: 1.0
        product_id: product.product_product_3
        uos_id: product.product_uom_unit
        discount: 3
        invoice_line_tax_id:
          - tax8i
    journal_id: account.bank_journal
    partner_id: base.res_partner_12
    reference_type: none
-
  I check that Initially customer invoice state is "Draft"
-
  !assert {model: account.invoice, id: invoice_8i_discount_8}:
    - state == 'draft'
-
  !workflow {model: account.invoice, action: invoice_open, ref: invoice_8i_discount_8}
-
  I check that the invoice state and amount
-
  !assert {model: account.invoice, id: invoice_8i_discount_8, string: Invoce is in open state}:
    - state == 'open'
    - amount_total == 489.95
