# Copyright 2020 Camptocamp SA
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl.html)

from odoo import api, fields, models


class SaleOrder(models.Model):
    _inherit = "sale.order"

    invoicing_mode = fields.Selection(related="partner_invoice_id.invoicing_mode")

    @api.model
    def generate_invoices(self, companies=None, mode=False):
        """Generate invoices for customers who require that mode.

        Invoices will be generated by other jobs split for different customer
        and different payment term.
        """
        if not companies:
            companies = self.company_id
        sale_order_groups = self.read_group(
            [
                ("invoicing_mode", "=", mode),
                ("invoice_status", "=", "to invoice"),
                ("company_id", "in", companies.ids),
            ],
            ["partner_invoice_id"],
            groupby=self._get_groupby_fields_for_invoicing(mode=mode),
            lazy=False,
        )
        for sale_order_group in sale_order_groups:
            sale_order_ids = self.search(sale_order_group["__domain"]).ids
            self.with_delay()._generate_invoices_by_partner(
                sale_order_ids, invoicing_mode=mode
            )
        return sale_order_groups

    def _generate_invoices_by_partner(self, sale_order_ids, invoicing_mode=False):
        """Generate invoices for a group of sale order belonging to a customer."""
        sales = (
            self.browse(sale_order_ids)
            .exists()
            .filtered(lambda r: r.invoice_status == "to invoice")
        )

        if not sales:
            return "No sales order to invoice anymore"
        invoices = sales._create_invoices(
            grouped=sales[0].partner_invoice_id.one_invoice_per_order,
            final=True,
        )
        for invoice in invoices:
            invoice.with_delay()._validate_invoice()
        return invoice

    @api.model
    def _get_groupby_fields_for_invoicing(self, mode=False):
        """Returns the sale order fields used to group them into jobs."""
        return ["partner_invoice_id", "payment_term_id"]
